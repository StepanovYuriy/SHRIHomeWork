/**
 * –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã.
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ Promise, async/await –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ.
 */
function asyncExecutor(generator) {
    const iterator = generator();

    const isPromise = (value) => {
        return Boolean(value && typeof value.then === 'function');
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Ç–∞–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        // return Boolean(value && Object.prototype.toString.call(value) === "[object Promise]");
        // return Boolean(value && value instanceof Promise);
        // return Boolean(value && Promise.resolve(value) === value);
    };

    const runNext = (yieldValue) => {
        const { value, done } = iterator.next(yieldValue);

        if (done) return value;

        if (isPromise(value)) {
            value
                .then((resolvedValue) => runNext(resolvedValue))
                .catch((error) => iterator.throw(error));
        } else {
            runNext(value);
        }
    };

    runNext();
}

// —Ç–µ—Å—Ç—ã
const ID = 42;
const delayMS = 1000;

function getId() {
    return new Promise((resolve) => {
        setTimeout(() => {
            resolve(ID);
        }, delayMS);
    });
}

function getDataById(id) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            id === ID ? resolve('üçé') : reject('üí•');
            // –î–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –º–æ–≥—É—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            // id === ID ? resolve('apple') : reject('boom');
        }, delayMS);
    });
}

asyncExecutor(function* () {
    // –¢.–∫. —Ñ—É–Ω–∫—Ü–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∏—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–µ—Ä–Ω—É—Ç—å –≤ try catch
    try {
        console.time('Time');

        const id = yield getId();
        const data = yield getDataById(id);
        console.log('Data', data);

        console.timeEnd('Time');
    } catch (error) {
        console.warn(error);
    }
});
